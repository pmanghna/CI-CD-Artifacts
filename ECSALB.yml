---
AWSTemplateFormatVersion: "2010-09-09"
Description: Template for provisioning ECS ALB

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Networking Configuration
        Parameters:
          - VPC
          - ALBSubnets
      -
        Label:
          default: ALB Configuration
        Parameters:
          - ALBCertName
          - ALBLoggingEnabled
          - ALBLogBucket
          - ALBAccessLogsPrefix

    ParameterLables:
      VPC:
        default: VPC ID
      ALBSubnets:
        default: ALB Subnets
      ALBCertName:
        default: ALB Certificate Name
      ALBLoggingEnabled:
        default: Enable ALB Logs
      ALBLogBucket:
        default: ALB Log Bucket
      ALBAccessLogsPrefix:
        default: ALB Log Prefix

Parameters:
  VPC: 
    Type: AWS::EC2::VPC::Id
    Description: Target VPC for deployment
  ALBSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select VPC public subnets to contain ALB nodes
  ALBCertName:
    Type: String
    Default: LightSpeedMaster
    Description: Name of the IAM Cert to use for SSL termination on the ALB
  ALBLoggingEnabled:
    Type: String
    AllowedValues:
      - True
      - False
    Default: False 
  ALBLogBucket:
    Type: String
    Description: Target bucket for ALB access logs, if enabled
  ALBAccessLogsPrefix:
    Type: String
    Default: ECSALB
    Description: Target prefix for ALB access logs, if enabled


Conditions:
  EnableAccessLogs: !Equals [!Ref ALBLoggingEnabled, True]

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  
  ALBSG: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      GroupDescription: SG for ECS App ALB (FrontEnd)
  
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        Fn::If:
          - EnableAccessLogs
          - - Key: access_logs.s3.enabled
              Value: True
            - Key: access_logs.s3.bucket
              Value: !Ref ALBLogBucket
            - Key: access_logs.s3.prefix
              Value: !Ref ALBAccessLogsPrefix
          - !Ref AWS::NoValue
      SecurityGroups: [!Ref ALBSG]
      Subnets: !Ref ALBSubnets
      Type: application

  ECSALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates: 
        - CertificateArn: !Join ["", ["arn:aws:iam::", !Ref "AWS::AccountId", ":server-certificate/", !Ref ALBCertName]]
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ECSALB
      Port: 443
      Protocol: HTTPS

  CreateRedirectListener:
    Type: Custom::RedirectListener
    Properties:
      ServiceToken: !GetAtt HTTPRedirectFunction.Arn
  
  HTTPRedirectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub
        - |
          import boto3
          import json
          import cfnresponse
          msg = ""
          def handler(event, context):
            client = boto3.client('elbv2')
            if event["RequestType"] == "Create":
              response = client.create_listener(
                LoadBalancerArn='${LoadBalancerArn}',
                Protocol='HTTP',
                Port=80,
                DefaultActions=[{
                  'Type': 'redirect',
                  'RedirectConfig': {
                    'Protocol': 'HTTPS',
                    'Port': '443',
                    'Host': '#{host}',
                    'Path': '/#{path}',
                    'Query': '#{query}',
                    'StatusCode': 'HTTP_301'
                  }
                }]
              )
              msg = "Redirect Listener Created"
            elif event["RequestType"] == "Delete":
              listenersResp = client.describe_listeners( LoadBalancerArn='${LoadBalancerArn}' )
              listenerArn = ""
              for l in listenersResp['Listeners']:
                if l['Port'] == 80:
                  listenerArn = l['ListenerArn']
              if listenerArn != "":
                response = client.delete_listener( ListenerArn=listenerArn )
                msg = "Redirect Listener Deleted"
              else:
                msg = "Could not find listener on port 80 to delete"
            else:
              msg = "Unknown Event: " + event["RequestType"]
            
            responseData = {}
            responseData['Data'] = msg
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "arn:aws:lightspeed-demo.com:ec2:httpsredirect")
        - LoadBalancerArn: !Ref ECSALB
      Handler: index.handler
      Description: ELBv2 Redirection CloudFormation Custom Resource
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.6'
      Timeout: '60'
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17" 
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
  
Outputs:
  ECSALBName:
    Description: ARN of the web app ALB
    Value: !Ref ECSALB
    Export: 
      Name: ECSALBARN
  WebALBCName:
    Description: cname of the web app ALB
    Value: !GetAtt ECSALB.DNSName
    Export:
      Name: ECSALBCname
  LoadBalancerName:
    Description: Name of the ECS ALB
    Value: !GetAtt ECSALB.LoadBalancerFullName
    Export:
      Name: ECSALBName
  LoadBalancerTargetGroupArn:
     Description: Target Group Arn of the ECS ALB
     Value: !Join [ "", [ "arn:aws:elasticloadbalancing:", !Ref "AWS::Region",":", !Ref "AWS::AccountId",":", !GetAtt TargetGroup.TargetGroupFullName ] ]
     Export:
       Name: ECSALBTargetGroupArn
  SecurityGroupALB:
      Description: Security Group used by the ALB
      Value: !GetAtt ALBSG.GroupId
      Export:
        Name: ECSALBSecurityGroup
