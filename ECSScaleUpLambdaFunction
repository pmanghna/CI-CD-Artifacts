// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region
AWS.config.update({region: 'us-east-1'});

//Create a CloudWatch Service Object
var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});

//Create an ECS Service Object
var ecs = new AWS.ECS({apiVersion: '2014-11-13'});

//create a variable to hold alarmstate
var alarmstate ;

//Flag to check if we need to scale
var scaleFlag;

exports.handler = function index(event, context, callback) {

//Creating ECS varibles
 var maxCount = 100;
 var ecsServiceName = 'lightspeed-us-east-1'; 

   var cloudwatchparams = {
     AlarmNames: [
    'ECSScaleUpAlarm'
    ]
  };

   var ecsparams = {
    services: [
     ecsServiceName
    ],
    cluster: 'lightspeed-ecs-production'
    };

  cw.describeAlarms(cloudwatchparams,function(err, data) {
      if (err) {
            console.log("Error", err);
            return callback(err);
        } else {
            alarmstate= data.MetricAlarms[0].StateValue;

        if (alarmstate=="ALARM"){
             console.log("Alarm in ALARM state");
                ecs.describeServices(ecsparams, function(err, data) {
                 if (err) {
                     console.log(err, err.stack);
                    } else {
                    var desiredCount = data.services[0].desiredCount;
                    console.log ('Desired count is '+desiredCount);
                    var numberOfDeployments = data.services[0].deployments.length;
                    console.log ("Number of deployments "+numberOfDeployments);

                    for (var i=0; i< numberOfDeployments; i++){
                    console.log ("Deployment status "+data.services[0].deployments[i].status);
                         if (data.services[0].deployments[i].status=='ACTIVE'){
                            scaleFlag = false;
                            console.log ("Scale flag is set to "+scaleFlag);
                            break;
                         }
                         else
                            scaleFlag = true;
                            console.log ("Scale flag is set to "+scaleFlag);
                    }

                    if (desiredCount < maxCount && scaleFlag == true){
                    console.log("The max count needs to be increased");
                    //incresase the task count
                    desiredCount++;
                    var ecsupdateparams = {
                        service:      ecsServiceName,
                        desiredCount: desiredCount,
                        cluster: 'lightspeed-ecs-production',
                        };
                    ecs.updateService(ecsupdateparams, function(err, data) {
                        if (err) {
                            console.log(err, err.stack);
                        } else {
                            console.log(data);
                            context.succeed();
                        }
                        });
                    }
                    else {
                       console.log ("Tasks already at max count or scaling is not permitted");
                       context.succeed();
                    }
                 }
                });
        }
            else {
                console.log("Alarm not in ALARM state");
            }
    }
  });

}
